# Llvmtools Chain: GCC
# Build and install as cmlfs

# Set the environment for cross-compiling if not done already.
export CC="${CMLFS_TARGET}-gcc"
export CXX="${CMLFS_TARGET}-g++"
export AR="${CMLFS_TARGET}-ar"
export AS="${CMLFS_TARGET}-as"
export RANLIB="${CMLFS_TARGET}-ranlib"
export LD="${CMLFS_TARGET}-ld"
export STRIP="${CMLFS_TARGET}-strip"

# Additional sources to add as GCC requires them 
xz -cd ../pkgs/mpfr-4.1.0.tar.xz | tar -xf -
mv -v mpfr-4.1.0 mpfr
xz -cd ../pkgs/gmp-6.2.1.tar.xz | tar -xf -
mv -v gmp-6.2.1 gmp
gunzip -cd ../pkgs/mpc-1.2.1.tar.gz | tar -xf -
mv -v mpc-1.2.1 mpc

# Apply patches [from Alpine-linux]
for p in 0001-posix_memalign.patch \
        0002-gcc-poison-system-directories.patch \
        0003-Turn-on-Wl-z-relro-z-now-by-default.patch \
        0004-Turn-on-D_FORTIFY_SOURCE-2-by-default-for-C-C-ObjC-O.patch \
        0005-On-linux-targets-pass-as-needed-by-default-to-the-li.patch \
        0006-Enable-Wformat-and-Wformat-security-by-default.patch \
        0007-Enable-Wtrampolines-by-default.patch \
        0008-Disable-ssp-on-nostdlib-nodefaultlibs-and-ffreestand.patch \
        0009-Ensure-that-msgfmt-doesn-t-encounter-problems-during.patch \
        0010-Don-t-declare-asprintf-if-defined-as-a-macro.patch \
        0011-libiberty-copy-PIC-objects-during-build-process.patch \
        0012-libitm-disable-FORTIFY.patch \
        0013-libgcc_s.patch \
        0014-nopie.patch \
        0015-libffi-use-__linux__-instead-of-__gnu_linux__-for-mu.patch \
        0016-dlang-update-zlib-binding.patch \
        0017-dlang-fix-fcntl-on-mips-add-libucontext-dep.patch \
        0018-ada-fix-shared-linking.patch \
        0019-build-fix-CXXFLAGS_FOR_BUILD-passing.patch \
        0020-add-fortify-headers-paths.patch \
        0022-DP-Use-push-state-pop-state-for-gold-as-well-when-li.patch \
        0023-Pure-64-bit-MIPS.patch \
        0024-use-pure-64-bit-configuration-where-appropriate.patch \
        0025-always-build-libgcc_eh.a.patch \
        0026-ada-libgnarl-compatibility-for-musl.patch \
        0027-ada-musl-support-fixes.patch \
        0028-gcc-go-Use-_off_t-type-instead-of-_loff_t.patch \
        0029-gcc-go-Don-t-include-sys-user.h.patch \
        0030-gcc-go-Fix-ucontext_t-on-PPC64.patch \
        0031-gcc-go-Fix-handling-of-signal-34-on-musl.patch \
        0032-gcc-go-Use-int64-type-as-offset-argument-for-mmap.patch \
        0033-gcc-go-Fix-st_-a-m-c-tim-fields-in-generated-sysinfo.patch \
        0034-gcc-go-signal-34-is-special-on-musl-libc.patch \
        0035-gcc-go-Prefer-_off_t-over-_off64_t.patch \
        0036-gcc-go-undef-SETCONTEXT_CLOBBERS_TLS-in-proc.c.patch \
        0037-gcc-go-link-to-libucontext.patch \
        0038-gcc-go-Disable-printing-of-unaccessible-ppc64-struct.patch \
        0039-CRuntime_Musl-Support-v1.2.0-for-32-bits.patch \
        0040-configure-Add-enable-autolink-libatomic-use-in-LINK_.patch
do
        patch -Np1 -i ../patches/gcc-alpine-10.2.1p2/$p
done

# Re-create internal header
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($CMLFS_TARGET-gcc -print-libgcc-file-name)`/include-fixed/limits.h

# change the location of GCC's default dynamic linker to use the one installed in /llvmtools
#
# For i686/x86_64:
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/llvmtools&@g' \
      -e 's@/usr@/llvmtools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/llvmtools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

# Configure in dedicated build directory
mkdir -v build && cd build
CC_FOR_BUILD="${CMLFS_TARGET}-gcc" \
CXX_FOR_BUILD="${CMLFS_TARGET}-g++" \
CFLAGS='-g0 -O0' \
CXXFLAGS='-g0 -O0' \
../configure                                       \
    --target=${CMLFS_TARGET}                        \
    --build=${CMLFS_HOST}                           \
    --host=${CMLFS_TARGET}                          \
    --prefix=/llvmtools/gnu                         \
    --with-local-prefix=/llvmtools/gnu              \
    --with-native-system-header-dir=/llvmtools/gnu/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp                              \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-symvers                              \
    --disable-libitm                               \
    --disable-libsanitizer

# Build - Set the PATHs for binaries and PATHs for libraries
PATH=/llvmtools/bin:/llvmtools/gnu/bin:/cgnutools/bin:/usr/bin:/bin \
LD_LIBRARY_PATH=/llvmtools/lib:/llvmtools/gnu/lib:/cgnutools/x86_64-cmlfs-linux-musl/lib:/cgnutools/lib:/usr/lib:/lib \
make

# Install
make install

# Many programs and scripts run cc instead of gcc, provide a link
ln -sv gcc /llvmtools/gnu/bin/cc

# Can't remember why this was done
#GCC_INCLUDEDIR=`dirname $(${CMLFS_TARGET}-gcc -print-libgcc-file-name)`/include &&
#find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &&
#rm -vf `grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*` &&
#unset GCC_INCLUDEDIR

# Test GCC portion of the toolchain
echo 'int main(){}' > dummy.c &&
cc dummy.c
readelf -l a.out | grep ': /llvmtools'

# Should output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]

# If all is well, remove the test files
rm -v dummy.c a.out
