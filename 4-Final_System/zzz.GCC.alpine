# Final System: GCC (optional)
# This section is done in Chroot environment

# NOTE: Installing GCC is optional as most packages can be built with clang.
# NOTE: GCC requires as (assembler) from binutils as LLVM's llvm-as isn't a
#       100% drop-in replacement for binutils' (unsupported arguments)

# Set CPU flags related to target system
case $(uname -m) in
  x86_64)  export EXTRA_CONFIG=" --with-arch=x86-64"
          ;;
  i686)    export EXTRA_CONFIG=" --with-arch=pentium3 --with-tune=pentium-m"
          ;;
  armv7l)  export  EXTRA_CONFIG=" --with-arch=armv7-a --with-tune=generic-armv7-a "
           export EXTRA_CONFIG+="--with-fpu=vfpv3-d16 --with-float=hard "
           export EXTRA_CONFIG+="--with-abi=aapcs-linux --with-mode=thumb"
          ;;
  armv6l)  export  EXTRA_CONFIG=" --with-arch=armv6zk --with-tune=arm1176jzf-s "
           export EXTRA_CONFIG+="--with-fpu=vfp --with-float=hard --with-abi=aapcs-linux"
          ;;
  aarch64) export  EXTRA_CONFIG=" --with-arch=armv8-a --with-abi=lp64 "
           export EXTRA_CONFIG+="--enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419"
           sed -i '/m64=/s/lib64/lib/' gcc/config/aarch64/t-aarch64-linux
          ;;
esac &&

# For ARM, disable libitm because of texrels
case $(uname -m) in
     arm*) export LIBITM=false ;;
esac &&

#tar -xf ../pkgs/isl-0.25.tar.xz &&
#mv -v isl-0.25 isl         &&

# Apply patches from glaucus
case $(uname -m) in
   x86_64)  patch -Np0 -i ../patches/gcc-glaucus/0001-pure64-for-x86-64.patch 
            ;;
   aarch64) patch -Np0 -i ../patches/gcc-glaucus/0001-pure64-for-aarch64.patch
            ;;
esac

# Apply fix from FreeBSD 
#patch -Np1 -i ../patches/gcc-freebsd/fix-ctype-def-order.patch 
patch -Np1 -i ../patches/gcc-freebsd/fix-system.h-and_explicit_includes.patch 
patch -Np1 -i ../patches/gcc-freebsd/fix-ctype-def-order_v2.patch

# Apply patches from Alpine Linux... makes no difference
patch -Np1 -i ../patches/gcc-alpine/0001-posix_memalign.patch
patch -Np1 -i ../patches/gcc-alpine/0002-gcc-poison-system-directories.patch 
patch -Np1 -i ../patches/gcc-alpine/0003-specs-turn-on-Wl-z-now-by-default.patch
patch -Np1 -i ../patches/gcc-alpine/0004-Turn-on-D_FORTIFY_SOURCE-2-by-default-for-C-C-ObjC-O.patch 
patch -Np1 -i ../patches/gcc-alpine/0005-On-linux-targets-pass-as-needed-by-default-to-the-li.patch
patch -Np1 -i ../patches/gcc-alpine/0006-Enable-Wformat-and-Wformat-security-by-default.patch 
patch -Np1 -i ../patches/gcc-alpine/0007-Enable-Wtrampolines-by-default.patch 
patch -Np1 -i ../patches/gcc-alpine/0008-Disable-ssp-on-nostdlib-nodefaultlibs-and-ffreestand.patch 
patch -Np1 -i ../patches/gcc-alpine/0009-Ensure-that-msgfmt-doesn-t-encounter-problems-during.patch 
patch -Np1 -i ../patches/gcc-alpine/0010-Don-t-declare-asprintf-if-defined-as-a-macro.patc
patch -Np1 -i ../patches/gcc-alpine/0011-libiberty-copy-PIC-objects-during-build-process.patch
patch -Np1 -i ../patches/gcc-alpine/0012-libgcc_s.patch
patch -Np1 -i ../patches/gcc-alpine/0013-nopie.patch
patch -Np1 -i ../patches/gcc-alpine/0014-ada-fix-shared-linking.patch
patch -Np1 -i ../patches/gcc-alpine/0015-build-fix-CXXFLAGS_FOR_BUILD-passing.patch
patch -Np1 -i ../patches/gcc-alpine/0016-add-fortify-headers-paths.patch
patch -Np1 -i ../patches/gcc-alpine/0017-Alpine-musl-package-provides-libssp_nonshared.a.-We-.patch 
patch -Np1 -i ../patches/gcc-alpine/0018-DP-Use-push-state-pop-state-for-gold-as-well-when-li.patch 
patch -Np1 -i ../patches/gcc-alpine/0019-aarch64-disable-multilib-support.patch
patch -Np1 -i ../patches/gcc-alpine/0020-s390x-disable-multilib-support.patch
patch -Np1 -i ../patches/gcc-alpine/0021-ppc64-le-disable-multilib-support.patch
#patch -Np1 -i ../patches/gcc-alpine/0022-x86_64-disable-multilib-support.patch
patch -Np1 -i ../patches/gcc-alpine/0023-riscv-disable-multilib-support.patch
patch -Np1 -i ../patches/gcc-alpine/0024-always-build-libgcc_eh.a.patch
patch -Np1 -i ../patches/gcc-alpine/0025-ada-libgnarl-compatibility-for-musl.patch 
patch -Np1 -i ../patches/gcc-alpine/0026-ada-musl-support-fixes.patch
patch -Np1 -i ../patches/gcc-alpine/0027-configure-Add-enable-autolink-libatomic-use-in-LINK_.patch 
patch -Np1 -i ../patches/gcc-alpine/0028-configure-fix-detection-of-atomic-builtins-in-libato.patch 
patch -Np1 -i ../patches/gcc-alpine/0029-libstdc-do-not-throw-exceptions-for-non-C-locales-on.patch 
patch -Np1 -i ../patches/gcc-alpine/0030-gdc-unconditionally-link-libgphobos-against-libucont.patch 
patch -Np1 -i ../patches/gcc-alpine/0031-druntime-link-against-libucontext-on-all-platforms.patch
patch -Np1 -i ../patches/gcc-alpine/0032-libgnat-time_t-is-always-64-bit-on-musl-libc.patch 
patch -Np1 -i ../patches/gcc-alpine/0033-libphobos-do-not-use-LFS64-symbols.patch
patch -Np1 -i ../patches/gcc-alpine/0034-libgo-fix-lfs64-use.patch 
patch -Np1 -i ../patches/gcc-alpine/0036-PR110792-Early-clobber-issues-with-rot32di2-on-i386.patch

# Apply patch from Chimera Linux
#patch -Np1 -i ../patches/gcc-chimera/clang17.patch

# Set paths for GNU libraries and headers for GCC:
export PKG_CONFIG_PATH=/opt/gnu/lib/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig
export       LIBRARY_PATH=/usr/lib:/opt/gnu/lib
export     C_INCLUDE_PATH=/opt/gnu/include
export CPLUS_INCLUDE_PATH=/opt/gnu/include
#export     CPLUS_INCLUDE_PATH=/usr/include/c++/v1:/opt/gnu/include:/usr/include:/usr/lib/clang/17/include
export PATH=/opt/gnu/bin:/bin:/usr/bin:/sbin:/usr/sbin

# Build in a dedicated directory
mkdir build && cd build

# Enable useful features
export  CARGS="--enable-__cxa_atexit --with-linker-hash-style=gnu  "
 Sexport CARGS+="--with-ppl=yes --with-cloog=yes --enable-cloog-backend "
export CARGS+="--enable-threads=posix --enable-clocale=generic --enable-tls "
export CARGS+="--enable-libstdcxx-time --enable-fully-dynamic-string "
export CARGS+="--enable-linker-build-id --enable-checking=release "

# Turn off features not needed
export  COFF="--disable-libstdcxx-pch --disable-nls --disable-multilib "
# Need bootstrap to due to unsupported GCC flags & 'poisoned headers'
#export COFF+="--disable-bootstrap --disable-symvers --disable-libsanitizer " 
export COFF+="--disable-symvers --disable-libsanitizer "
export COFF+="--disable-libssp --disable-libmpx --disable-libmudflap "
export COFF+="--disable-fixed-point --disable-sjlj-exceptions --disable-werror "

# Configure source
CC=clang CXX=clang++ \
LDFLAGS="-Wl,--rpath=/opt/gnu/lib" \
SED=sed  libat_cv_have_ifunc=no \
../configure --prefix=/opt/gnu \
             --build=x86_64-pc-linux-musl \
             --enable-languages=c,c++,lto \
             --enable-lto \
             --with-pkgversion='CMLFS 4.0.0' \
             --enable-default-pie \
             --enable-default-ssp \
             --enable-plugins \
             --with-system-zlib $CARGS $COFF

# Compile
LD_LIBRARY_PATH=/opt/gnu/lib make 

# Install!
make install

# Bootstrapping does not use the LDFLAGS set for run-path
# Fix with patchelf
for b in cc1 cc1plus lto1
do
  patchelf --set-rpath /opt/gnu/lib  /opt/gnu/libexec/gcc/x86_64-pc-linux-musl/13.2.0/$b
done
patchelf --set-rpath /opt/gnu/lib /opt/gnu/bin/lto-dump 

# Create a symlink required by the FHS for 'historical' reasons
ln -sv ../bin/cpp /opt/gnu/lib/cpp

# Many packages use the name cc to call the C compiler. Satisfy
# those pacakges with a symlink:
ln -sv gcc /opt/gnu/bin/cc

# Create a compatibility symlink to enable building programs with
# LTO (Link Time Optimization)
install -v -dm755 /opt/gnu/lib/bfd-plugins
ln -sv  ../../libexec/gcc/${TUPLE}/13.2.0/liblto_plugin.so \
        /opt/gnu/lib/bfd-plugins/
mkdir -pv /opt/gnu/share/gdb/auto-load/usr/lib
mv -v /opt/gnu/lib/*gdb.py /opt/gnu/share/gdb/auto-load/usr/lib

# Clean up variables used in this build
unset PKG_CONFIG_PATH LIBRARY_PATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH
export PATH=/bin:/usr/bin:/sbin:/usr/sbin
