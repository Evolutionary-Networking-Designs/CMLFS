# cgnutools: Configure cgnutools to build llvmtools
# Modify as cmlfs user

# Configure clang to build binaries with /llvmtools/lib/ld-musl-x86_64.so.1 instead
# of /lib/ld-musl-x86_64.so.1. This is similar in Musl-LFS/LFS when gcc specs 
# file is modified to set the dynamic linker in /tools instead of host's /lib
ln -sv clang-15   /cgnutools/bin/${CMLFS_TARGET}-clang
ln -sv clang-15   /cgnutools/bin/${CMLFS_TARGET}-clang++
cat > /cgnutools/bin/${CMLFS_TARGET}.cfg << "EOF"
-Wl,-dynamic-linker /llvmtools/lib/ld-musl-x86_64.so.1
-L/cgnutools/lib/x86_64-pc-linux-musl
EOF

# Clang will require libunwind
# Link libunwind to /cgnutools/lib
ln -sv x86_64-pc-linux-musl/libunwind.so.1.0 /cgnutools/lib/libunwind.so
ln -sv x86_64-pc-linux-musl/libunwind.so.1.0 /cgnutools/lib/libunwind.so.1

# Fix a path with a link, so clang can find it
ln -sv x86_64-pc-linux-musl /cgnutools/lib/clang/15.0.5/lib/linux
ln -sv libclang_rt.builtins.a /mnt/cmlfs/cgnutools/lib/clang/15.0.5/lib/linux/libclang_rt.builtins-x86_64.a 

# Set LLD as default toolchain linker
ln -sv lld /cgnutools/bin/ld

# Configure cross-GCC of cgnutools to match the same output as clang
# Dump current specs 
export SPECFILE=`dirname $(${CMLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
${CMLFS_TARGET}-gcc -dumpspecs > specs

# Modify dumped specs file 
sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/llvmtools\/lib\/ld-musl-x86_64.so.1/g' specs

# Check:
grep "/llvmtools/lib/ld-musl-x86_64.so.1" specs  --color=auto

# Install modified specs to the cgnutools toolchain
mv -v specs $SPECFILE
unset SPECFILE

# Create link for libc.so. It will be replaced with a clang-built
# one next
mkdir -v /llvmtools/lib
ln -sv /cgnutools/lib/libc.so /llvmtools/lib/ld-musl-$(uname -m).so.1

# Check the PATH
export PATH=/cgnutools/bin:/llvmtools/bin:/bin:/usr/bin

# Test GCC of cgnutools toolchain:
echo "int main(){}" > dummy.c
${CMLFS_TARGET}-gcc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /llvmtools'
# Shoud output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]

# Check if the correct start files are used
grep  'lib.*/crt[1in].*succeeded' dummy.log | cut -d ' ' -f 4-5 | cut -b 5-
# Should output:
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crt1.o succeeded
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crti.o succeeded
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crtn.o succeeded

# Make sure no libraries are loaded from the host:
grep succeeded dummy.log

# Should output:
# attempt to open /mnt/cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crt1.o succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crti.o succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/crtbegin.o succeeded
# attempt to open /tmp/cctE6xgF.o succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/libgcc.a succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/../../../../x86_64-cmlfs-linux-musl/lib/../lib/libgcc_s.so succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/../../../../x86_64-cmlfs-linux-musl/lib/../lib/libgcc_s.so.1 succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/libgcc.a succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/libc.so succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/libgcc.a succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/../../../../x86_64-cmlfs-linux-musl/lib/../lib/libgcc_s.so succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/../../../../x86_64-cmlfs-linux-musl/lib/../lib/libgcc_s.so.1 succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/libgcc.a succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/crtend.o succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crtn.o succeeded

# If all is good, clean up
rm -rf a.out dummy.log

# Test Clang of cgnutools toolchain:
${CMLFS_TARGET}-clang dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /llvmtools'
# Shoud output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]

# Check if the correct start files are used
grep  'crt[1in]' dummy.log | grep ld.lld:
# Should output:
# /cgnutools/lib/crt1.o succeeded
# /cgnutools/lib/crti.o succeeded
# /cgnutools/lib/crtn.o succeeded

# Make sure no libraries are loaded from the host:
grep ld.lld:  dummy.log 

# Should output:
# ld.lld: /cgnutools/lib/Scrt1.o
# ld.lld: /cgnutools/lib/crti.o
# ld.lld: /cgnutools/lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/crtbeginS.o
# ld.lld: /tmp/dummy-56dafa.o
# ld.lld: /mnt/cmlfs/cgnutools/lib/clang/15.0.5/lib/linux/libclang_rt.builtins-x86_64.a
# ld.lld: /cgnutools/lib/libunwind.so
# ld.lld: /cgnutools/lib/libc.so
# ld.lld: /mnt/cmlfs/cgnutools/lib/clang/15.0.5/lib/linux/libclang_rt.builtins-x86_64.a
# ld.lld: /cgnutools/lib/libunwind.so
# ld.lld: /cgnutools/lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/crtendS.o
# ld.lld: /cgnutools/lib/crtn.o

# If all is good, clean up:
rm -v dummy.log dummy.c a.out
