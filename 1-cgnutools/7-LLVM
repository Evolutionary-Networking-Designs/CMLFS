# cgnutools: Stage0 LLVM Runtime Libraries ( with clang,compiler-rt,libcxx,libcxxabi,libunwind,lld)
# Build as cmlfs
#
# NOTE: Unpack llvm-project-x.x.x.src.tar.xz not llvm-x.x.x.src.tar.xz

# Rename for shorter paths:
mv llvm-project-15.0.5.src llvm-rl 
export LLVMSRC=${CMLFS}/sources/llvm-rl 

cd $LLVMSRC

# Apply patches for main LLVM source ... from alpine linux:
patch -Np1 -i ../patches/llvm15-alpine/0001-Disable-dynamic-lib-tests-for-musl-s-dlclose-is-noop.patch
patch -Np1 -i ../patches/llvm15-alpine/fix-memory-mf_exec-on-aarch64.patch
patch -Np1 -i ../patches/llvm15-alpine/install-prefix.patch
patch -Np1 -i ../patches/llvm15-alpine/llvm-stack-size.patch

# Known broken test on musl
cd llvm
rm -v test/CodeGen/AArch64/wineh4.mir
# https://github.com/llvm/llvm-project/issues/47657
rm -v test/ExecutionEngine/Interpreter/intrinsics.ll

# If builing on x86, remove tests:
rm -v test/Object/macho-invalid.test test/tools/llvm-size/radix.test unittests/Support/JSONTest.cpp
sed -i "/JSONTest.cpp/d" unittests/Support/CMakeLists.txt

# If building on arm*, remove tests:
rm -v test/tools/llvm-readobj/ELF/dependent-libraries.test test/Object/macho-invalid.test \
      test/tools/llvm-size/radix.test test/tools/gold/X86/split-dwarf.ll \
      test/ExecutionEngine/frem.ll test/tools/llvm-dwarfdump/X86/prettyprint_types.s \
      test/tools/llvm-dwarfdump/X86/simplified-template-names.s \
      unittests/ExecutionEngine/Orc/OrcCAPITest.cpp \
      test/CodeGen/RISCV/rv32zbp.ll \
      test/CodeGen/RISCV/rv64zbp.ll
sed -i "/OrcCAPITest.cpp/d" unittests/ExecutionEngine/Orc/CMakeLists.txt

# If building Hexagon target, there is a known broken codegen 
# for Hexagon target, reported upstream.
# https://github.com/llvm/llvm-project/issues/48936
#rm -v \
#                test/CodeGen/Hexagon/csr-stubs-spill-threshold.ll \
#                test/CodeGen/Hexagon/long-calls.ll \
#                test/CodeGen/Hexagon/mlong-calls.ll \
#                test/CodeGen/Hexagon/pic-regusage.ll \
#                test/CodeGen/Hexagon/runtime-stkchk.ll \
#                test/CodeGen/Hexagon/swp-memrefs-epilog.ll \
#                test/CodeGen/Hexagon/vararg-formal.ll \
#                test/tools/llvm-objcopy/MachO/universal-object.test \
#                test/DebugInfo/X86/vla-multi.ll

# Return to top-level
cd ..

# Apply patches for clang
cd clang
patch -Np1 -i ../../patches/llvm15-clang-alpine/10-add-musl-triples.patch

# Apply patches for compiler-rt 
cd ../compiler-rt 
patch -Np2 -i ../../patches/llvm15-compiler-rt-alpine/compiler-rt-sanitizer-ppc64-musl.patch 
patch -Np2 -i ../../patches/llvm15-compiler-rt-alpine/compiler-rt-sanitizer-supported-arch.patch 

# Apply patches for libcxx
cd ../libcxx
patch -Np2 -i ../../patches/llvm15-libcxx-alpine/libcxx-musl.patch 
patch -Np2 -i ../../patches/llvm15-libcxx-alpine/libcxx-ppc.patch 

cd ..

# Set flags to greatly reduce debugging symbols
CFLAGS=' -g -g1 -Wl,--as-needed -lexecinfo'
CXXFLAGS=$CFLAGS
export CFLAGS CXXFLAGS

# Set the build options ..
export  CONFIG_OPTIONS="-DCMAKE_BUILD_TYPE=Release "
export CONFIG_OPTIONS+="-DBUILD_SHARED_LIBS=ON "
export CONFIG_OPTIONS+="-DLLVM_ENABLE_LIBCXX=ON "
export CONFIG_OPTIONS+="-DLLVM_TARGET_ARCH=X86 "
export CONFIG_OPTIONS+="-DLLVM_TARGETS_TO_BUILD=X86 "
export CONFIG_OPTIONS+="-DLIBCXX_HAS_MUSL_LIBC=ON "
export CONFIG_OPTIONS+="-DLLVM_ENABLE_EH=ON "
export CONFIG_OPTIONS+="-DLLVM_ENABLE_RTTI=ON "
export CONFIG_OPTIONS+="-DLLVM_BUILD_LLVM_DYLIB=ON "

# Set the compiler and linker flags...
export LINKERFLAGS="-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1"
export  CONFIG_TOOLS="-DCMAKE_C_COMPILER=${CMLFS_TARGET}-gcc "
export CONFIG_TOOLS+="-DCMAKE_CXX_COMPILER=${CMLFS_TARGET}-g++ "
export CONFIG_TOOLS+="-DCLANG_DEFAULT_LINKER=/cgnutools/bin/ld.lld "

# Set the tuples...
export  CONFIG_TUPLES="-DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl "
export CONFIG_TUPLES+="-DLLVM_HOST_TRIPLE=x86_64-pc-linux-musl "
export CONFIG_TUPLES+="-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl "

# Set the flags for Compiler-rt...
export  CONFIG_CRT="-DCOMPILER_RT_BUILD_SANITIZERS=OFF"
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_XRAY=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_PROFILE=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_LIBFUZZER=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_ORC=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_CAN_EXECUTE_TESTS=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_HWASAN_WITH_INTERCEPTORS=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_USE_LLVM_UNWINDER=ON "

# Set the flags for clang:
export  CONFIG_CLANG="-DCLANG_DEFAULT_CXX_STDLIB=libc++ "
export CONFIG_CLANG+="-DCLANG_DEFAULT_UNWINDLIB=libunwind "
export CONFIG_CLANG+="-DCLANG_DEFAULT_RTLIB=compiler-rt "
export CONFIG_CLANG+="-DCLANG_ENABLE_STATIC_ANALYZER=OFF "
export CONFIG_CLANG+="-DCLANG_ENABLE_ARCMT=OFF "
export CONFIG_CLANG+="-DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF "
export CONFIG_CLANG+="-DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF "
export CONFIG_CLANG+="-DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF "
export CONFIG_CLANG+="-DCLANG_TOOL_AMDGPU_ARCH_BUILD=OFF "
export CONFIG_CLANG+="-DCLANG_TOOL_APINOTES_TEST_BUILD=OFF "
export CONFIG_CLANG+="-DCLANG_TOOL_ARCMT_TEST_BUILD=OFF "

# Set the flags to prevent build static libraries for
# libunwind, libcxxabi, and libcxx:
export  CONFIG_LIBUNWIND="-DLIBUNWIND_ENABLE_STATIC=OFF "
export  CONFIG_LIBCXXABI="-DLIBCXXABI_ENABLE_STATIC=OFF "
export  CONFIG_LIBCXX="-DLIBCXX_ENABLE_STATIC=OFF "

# Set the options for libc++
export CONFIG_LIBCXX+="-DLIBCXX_USE_COMPILER_RT=ON "
export CONFIG_LIBCXX+="-DLIBCXX_EXTRA_SITE_DEFINES=ON "
export CONFIG_LIBCXX+="-DLIBCXX_ENABLE_ASSERTIONS=ON "
export CONFIG_LIBCXX+="-DLIBCXX_ENABLE_LOCALIZATION=OFF "
export CONFIG_LIBCXX+="-DLIBCXX_ENABLE_VENDOR_AVAILABILITY_ANNOTATIONS=ON "
export CONFIG_LIBCXX+="-DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=OFF "

# Set the options for libc++abi
export CONFIG_LIBCXXABI+="-DLIBCXXABI_ENABLE_FORGIVING_DYNAMIC_CAST=ON "
export CONFIG_LIBCXXABI+="-DLIBCXXABI_USE_COMPILER_RT=ON "
export CONFIG_LIBCXXABI+="-DLIBCXXABI_USE_LLVM_UNWINDER=ON "

# Set the options for libunwind
export CONFIG_LIBUNWIND+="-DLIBUNWIND_ENABLE_CROSS_UNWINDING=ON "

# Set paths...
export  CONFIG_PATHS="-DCMAKE_INSTALL_PREFIX=/cgnutools "
export CONFIG_PATHS+="-DCMAKE_INSTALL_OLDINCLUDEDIR=/cgnutools/include "
export CONFIG_PATHS+="-DDEFAULT_SYSROOT=/cgnutools "
export CONFIG_PATHS+="-DBacktrace_LIBRARY=/cgnutools/lib/libexecinfo.so "
#export CONFIG_PATHS+="-DICONV_LIBRARY_PATH=/cgnutools/lib/libc.so"

# Turn off unwanted features, docs and tests
export  BUILD_OFF="-DLLVM_BUILD_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_GO_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_DOCS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_EXAMPLES=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_BENCHMARKS=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_OCAMLDOC=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_BACKTRACES=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBEDIT=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBXML2=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBPFM=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_TERMINFO=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_ZLIB=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_Z3_SOLVER=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_CRASH_OVERRIDES=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_ZSTD=OFF "
export BUILD_OFF+="-DLLVM_APPEND_VC_REV=OFF "
export BUILD_OFF+="-DLIBCXX_INCLUDE_BENCHMARKS=OFF "
export BUILD_OFF+="-DLLVM_TOOL_XCODE_TOOLCHAIN_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_XRAY_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_GO_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_BUGPOINT_PASSES_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_BUGPOINT_BUILD=OFF "

# Configure source
cmake -B build -G Ninja -Wno-dev -S llvm  \
      -DCMAKE_EXE_LINKER_FLAGS="${LINKERFLAGS}"    \
      -DCMAKE_SHARED_LINKER_FLAGS="${LINKERFLAGS}" \
      ${CONFIG_TOOLS} ${CONFIG_TUPLES} \
      ${CONFIG_CRT} ${CONFIG_CLANG} ${CONFIG_OPTIONS} \
      ${CONFIG_LIBUNWIND} ${CONFIG_LIBCXXABI} \
      ${CONFIG_LIBCXX} ${CONFIG_PATHS} ${BUILD_OFF}  \
      -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;libcxx;libcxxabi;lld;libunwind" \
      -DCLANG_VENDOR="cgnutools 3.0.0" -DLLD_VENDOR="cgnutools 3.0.0" 

# Compile
ninja -C build cxx
ninja -C build

# Install to /cgnutools
ninja -C build install

# Clean up
unset CFLAGS CXXFLAGS CONFIG_TOOLS CONFIG_TUPLES
unset CONFIG_CRT CONFIG_CLANG CONFIG_OPTIONS 
unset CONFIG_LIBUNWIND CONFIG_LIBCXXABI CONFIG_LIBCXX
unset CONFIG_PATHS BUILD_OFF LLVMSRC
rm -rf build

# Source tree will be used later. Save time by not removing
