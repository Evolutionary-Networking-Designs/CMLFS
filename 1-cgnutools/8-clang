# cgnutools: Stage0 LLVM+clang
# Build as cmlfs
#
# * Build stage0 clang/clang++ with compiler-rt, lld, libunwind, libcxxabi, and libcxx
#   in LLVM source directory

cd ${LLVMSRC}
# make sure compiler-rt, libcxx, libcxxabi, libunwind are unpacked in ${{LLVMSRC}/projects
# and clang & lld in ${LLVMSRC}/tools.

# Fix typo in libcxx
cd projects/libcxx
patch -Np1 -i  ../../../patches/libcxx/strtoll_fix.patch
cd ${LLVMSRC}

# Apply patches from void linux
patch -Np1 -i ../patches/llvm11-void/llvm-001-musl.patch
patch -Np1 -i ../patches/llvm11-void/llvm-002-ppcle.patch
patch -Np1 -i ../patches/llvm11-void/llvm-002-musl-ppc64-elfv2.patch
patch -Np1 -i ../patches/llvm11-void/llvm-003-ppc-secureplt.patch
patch -Np1 -i ../patches/llvm11-void/llvm-004-override-opt.patch
patch -Np1 -i ../patches/llvm11-void/llvm-005-ppc-bigpic.patch
patch -Np1 -i ../patches/llvm11-void/llvm-006-aarch64-mf_exec.patch
cd tools/clang
patch -Np1 -i ../../../patches/llvm11-void/clang-001-fix-unwind-chain-inclusion.patch
patch -Np1 -i ../../../patches/llvm11-void/clang-001-ppcle.patch
patch -Np1 -i ../../../patches/llvm11-void/clang-002-add-musl-triples.patch
patch -Np1 -i ../../../patches/llvm11-void/clang-003-ppc64-dynamic-linker-path.patch
patch -Np1 -i ../../../patches/llvm11-void/clang-004-ppc64-musl-elfv2.patch
cd ${LLVMSRC}

# Disable sanitizers for musl systems, per Void Linux
sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' projects/compiler-rt/cmake/config-ix.cmake

# Set flags to greatly reduce debugging symbols
export CFLAGS=" -g -g1"
export CXXFLAGS=" -g -g1" 

# Update host/target triple detection
cp -v ../files/config.guess cmake/

# Configure source
cmake -B build -G Ninja  \
      -DCMAKE_BUILD_TYPE=MinSizeRel \
      -DCMAKE_INSTALL_PREFIX="/cgnutools" \
      -DCMAKE_C_COMPILER="${CMLFS_TARGET}-gcc" \
      -DCMAKE_CXX_COMPILER="${CMLFS_TARGET}-g++" \ 
      -DLLVM_BUILD_TESTS=OFF \
      -DLLVM_ENABLE_LIBEDIT=OFF \
      -DLLVM_ENABLE_LIBXML2=OFF \
      -DLLVM_INCLUDE_GO_TESTS=OFF \
      -DLLVM_INCLUDE_TESTS=OFF \
      -DLLVM_INCLUDE_DOCS=OFF \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_BENCHMARKS=OFF \
      -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DLLVM_HOST_TRIPLE="x86_64-pc-linux-musl" \
      -DLLVM_TARGET_ARCH="X86" \
      -DLLVM_TARGETS_TO_BUILD="X86" \
      -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
      -DCOMPILER_RT_BUILD_XRAY=OFF \
      -DCOMPILER_RT_BUILD_PROFILE=OFF \
      -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
      -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
      -DCLANG_DEFAULT_CXX_STDLIB=libc++ \ 
      -DCLANG_DEFAULT_UNWINDLIB=libunwind \
      -DCLANG_DEFAULT_RTLIB=compiler-rt \
      -DICONV_LIBRARY_PATH="/cgnutools/lib/libc.so" \
      -DDEFAULT_SYSROOT="/cgnutools" \
      -DLIBCXX_HAS_MUSL_LIBC=ON \
      -DLLVM_ENABLE_LIBCXX=ON \
      -DCLANG_DEFAULT_LINKER="/cgnutools/bin/ld.lld" \
      -DBacktrace_HEADER="/cgnutools/include/execinfo.h" \
      -DCMAKE_EXE_LINKER_FLAGS="-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1" \
      -DCMAKE_SHARED_LINKER_FLAGS="-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1" \
      -DBacktrace_LIBRARY="/cgnutools/lib/libexecinfo.so.1"

# Now ready to build
LD_LIBRARY_PATH=/cgnutools/lib:/cgnutools/${CMLFS_TARGET}/lib:/usr/lib:/lib \
ninja -C build         && \
LD_LIBRARY_PATH=/cgnutools/lib:/cgnutools/${CMLFS_TARGET}/lib:/usr/lib:/lib \
ninja -C build install && \ 
rm -rf build

# Set LLD as default toolchain linker
ln -sv lld /cgnutools/bin/ld

# Configure clang to build binaries with /llvmtools/lib/ld-musl-x86_64.so.1 instead
# of /lib/ld-musl-x86_64.so.1. This is similar in Musl-LFS/LFS when gcc specs 
# file is modified to set the dynamic linker in /tools instead of host's /lib
ln -sv clang-11   /cgnutools/bin/x86_64-pc-linux-musl-clang
ln -sv clang-11   /cgnutools/bin/x86_64-pc-linux-musl-clang++
cat > /cgnutools/bin/x86_64-pc-linux-musl.cfg << "EOF"
-Wl,-dynamic-linker /llvmtools/lib/ld-musl-x86_64.so.1
EOF

# Set the PATH
export PATH=/cgnutools/bin:/llvmtools/bin:/bin:/usr/bin

