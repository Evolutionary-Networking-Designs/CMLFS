# Cross-Tools: GCC Final
# Build and install as cmlfs

# Additional sources to add as GCC requires them 
xz -cd ../pkgs/mpfr-4.1.0.tar.xz | tar -xf - 
mv -v mpfr-4.1.0 mpfr
xz -cd ../pkgs/gmp-6.2.1.tar.xz | tar -xf - 
mv -v gmp-6.2.1 gmp
gunzip -cd ../pkgs/mpc-1.2.1.tar.gz | tar -xf -
mv -v mpc-1.2.1 mpc

# Apply patches [from Alpine-linux]
bash ../patches/gcc-10.3.1_git20210424-alpine/apply_patches_ct.sh

# For 64-bit systems, fix a file so GCC installs libraries in 'lib' and not 'lib64'
case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
 ;;
esac

# Configure in a dedicated build directory
mkdir build && cd  build
AR=ar LDFLAGS="-Wl,-rpath,/cgnutools/lib" \
../configure \
    --prefix=/cgnutools \
    --build=${CMLFS_HOST} \
    --host=${CMLFS_HOST} \
    --target=${CMLFS_TARGET} \
    --disable-multilib \
    --with-sysroot=/cgnutools \
    --disable-nls \
    --enable-shared \
    --enable-languages=c,c++ \
    --enable-threads=posix \
    --enable-clocale=generic \
    --enable-libstdcxx-time \
    --enable-fully-dynamic-string \
    --disable-symvers \
    --disable-libsanitizer \
    --disable-lto-plugin \
    --disable-libssp 

# Build
make AS_FOR_TARGET="${CMLFS_TARGET}-as" \
    LD_FOR_TARGET="${CMLFS_TARGET}-ld"

# Install
make install

# Now adjust GCC to produce programs and libraries that will use musl libc in /cgnutools...
export SPECFILE=`dirname $(${CMLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
${CMLFS_TARGET}-gcc -dumpspecs > specs
sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/cgnutools\/lib\/ld-musl-x86_64.so.1/g' specs

# Check specs file
grep "/cgnutools/lib/ld-musl-x86_64.so.1" specs  --color=auto

# Install specs file
mv -v specs $SPECFILE
unset SPECFILE

# Check if GCC compiles as intended:
echo "int main(){}" > dummy.c
${CMLFS_TARGET}-gcc dummy.c
readelf -l a.out | grep Requesting
# Should output:
# [Requesting program interpreter: /cgnutools/lib/ld-musl-x86_64.so.1]
