# llvmtools: Musl Libc
# Build and install as cmlfs

# Make sure PATH is set ...
export PATH=/cgnutools/bin:/llvmtools/bin:/bin:/usr/bin

# and ... set C and C++ compilers with stage0 clang
export CXX=clang++
export  CC=clang

# Configure
CC=$CC CXX=$CXX ./configure --prefix=/ 

# Build and install to llvmtools
# Headers will not be installed, as it was already
# installed before building stage0 clang
make && make DESTDIR=/llvmtools install

# fix a symlink
rm -v /llvmtools/lib/ld-musl-x86_64.so.1
ln -sv libc.so /llvmtools/lib/ld-musl-x86_64.so.1

# Create a symlink to make a tool that can print the 
# shared objects (shared libraries) required by each 
# program or shared object (i.e. library)
# mkdir /llvmtools/{bin,etc}
# ln -sv ../lib/libc.so /llvmtools/bin/ldd

# Configure dynamic linker
cat > /llvmtools/etc/ld-musl-x86_64.path << "EOF"
/llvmtools/lib
EOF

# Test clang of  cgnutools toolchain:
echo "int main(){}" > dummy.c
${CMLFS_TARGET}-clang dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /llvmtools'
# Shoud output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]

# Check if the correct start files are used
grep 'ld.lld:' dummy.log | grep crt[1in]
# Should output:
# ld.lld: /cgnutools/lib/gcc/x86_64-cmlfs-linux-musl/10.3.1/../../../Scrt1.o
# ld.lld: /cgnutools/lib/gcc/x86_64-cmlfs-linux-musl/10.3.1/../../../crti.o
# ld.lld: /cgnutools/lib/gcc/x86_64-cmlfs-linux-musl/10.3.1/../../../crtn.o

# If all is well, remove output files;
rm -v a.out dummy.log
